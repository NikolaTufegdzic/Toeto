//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerPad"",
            ""id"": ""d401d938-c5ca-45b5-b2e5-19920e9dd9e8"",
            ""actions"": [
                {
                    ""name"": ""LeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""b02b7cc6-632b-4f6c-a2a6-6df6e00a5d1b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Value"",
                    ""id"": ""b9c21e62-e4e5-45de-b707-245580b00aa3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Launch"",
                    ""type"": ""Value"",
                    ""id"": ""ee7b5c3a-046d-4d21-9e6f-d4b3b26c3420"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""f92f7356-3373-4415-a200-c8522fec3e32"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ebed1c88-6774-4213-8829-97415a4ff57b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b3434287-2850-484d-82a4-f2c5461dabb0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftRightArrows"",
                    ""id"": ""789752ce-7d5e-457d-9c60-0079d6f32ac4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3a8aee58-0d3c-42aa-ae98-adbc57f07cb2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0c4dd480-ed74-4130-b5a2-23f723f3e3e8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WS"",
                    ""id"": ""c36f1e1d-ee3f-49fa-b46e-76c03891202e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""37b6b7b9-dfe8-4dc2-9fa6-59d3e6dbe5ea"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a848b755-3f28-4f21-914f-6b6b43b5f3e6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""UpDownArrows"",
                    ""id"": ""6d59faa7-b9ed-4e15-81b5-5898a89b8941"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""baaa43f2-206c-424c-8e97-7f7c25071677"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""33f3a22c-f97c-4d4d-b851-12d5827f9f1b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""55fdfe86-2927-4129-a285-2dfbd4dcf24a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be941109-28d9-4298-a9e7-42695a8232ed"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerAbilities"",
            ""id"": ""48755edc-c67e-4939-b642-7a077c2c5841"",
            ""actions"": [
                {
                    ""name"": ""PointAbility1"",
                    ""type"": ""Value"",
                    ""id"": ""a1ad53fd-2be2-460a-8e84-698549fca71e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointAbility2"",
                    ""type"": ""Value"",
                    ""id"": ""fc0fb88c-e29d-465b-94a5-1f8e7f5e3fa1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4417495b-5cd9-488d-8f44-d48ecb3c0742"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointAbility1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58d53714-225f-4317-8102-8859f0649666"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointAbility1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9acd239b-d9e8-422e-a6c3-f36a4c9a5ea3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointAbility2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aee1feb-7137-4fb4-bb44-2760856a61d4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointAbility2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInteractions"",
            ""id"": ""99543306-e5ac-4cb8-b06e-88ac21dd1884"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""e3992b29-3014-460a-a2b9-9377b6524783"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LevelUp"",
                    ""type"": ""Button"",
                    ""id"": ""5006d1ab-3721-4ca1-b0bf-bdbc6145c1b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Nothing"",
                    ""type"": ""Button"",
                    ""id"": ""3c620fce-ba06-4068-a986-e0cf3c44866f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""988aa3b2-137d-4c8f-b82c-5f9be975a127"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fd43ff8-8f99-4fa4-8132-1ea319b47dfd"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""680d7f63-3a6e-4dae-b512-fea96a419014"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LevelUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b57d4c59-bf70-4584-bb12-85e6d785ba81"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LevelUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b6b0c73-9b07-40d7-8eb9-f0a752f846e1"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nothing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8fa8112-0595-4044-8d8b-464e3f02e7b3"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nothing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerPad
        m_PlayerPad = asset.FindActionMap("PlayerPad", throwIfNotFound: true);
        m_PlayerPad_LeftRight = m_PlayerPad.FindAction("LeftRight", throwIfNotFound: true);
        m_PlayerPad_UpDown = m_PlayerPad.FindAction("UpDown", throwIfNotFound: true);
        m_PlayerPad_Launch = m_PlayerPad.FindAction("Launch", throwIfNotFound: true);
        // PlayerAbilities
        m_PlayerAbilities = asset.FindActionMap("PlayerAbilities", throwIfNotFound: true);
        m_PlayerAbilities_PointAbility1 = m_PlayerAbilities.FindAction("PointAbility1", throwIfNotFound: true);
        m_PlayerAbilities_PointAbility2 = m_PlayerAbilities.FindAction("PointAbility2", throwIfNotFound: true);
        // PlayerInteractions
        m_PlayerInteractions = asset.FindActionMap("PlayerInteractions", throwIfNotFound: true);
        m_PlayerInteractions_Escape = m_PlayerInteractions.FindAction("Escape", throwIfNotFound: true);
        m_PlayerInteractions_LevelUp = m_PlayerInteractions.FindAction("LevelUp", throwIfNotFound: true);
        m_PlayerInteractions_Nothing = m_PlayerInteractions.FindAction("Nothing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerPad
    private readonly InputActionMap m_PlayerPad;
    private List<IPlayerPadActions> m_PlayerPadActionsCallbackInterfaces = new List<IPlayerPadActions>();
    private readonly InputAction m_PlayerPad_LeftRight;
    private readonly InputAction m_PlayerPad_UpDown;
    private readonly InputAction m_PlayerPad_Launch;
    public struct PlayerPadActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerPadActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftRight => m_Wrapper.m_PlayerPad_LeftRight;
        public InputAction @UpDown => m_Wrapper.m_PlayerPad_UpDown;
        public InputAction @Launch => m_Wrapper.m_PlayerPad_Launch;
        public InputActionMap Get() { return m_Wrapper.m_PlayerPad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerPadActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerPadActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerPadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerPadActionsCallbackInterfaces.Add(instance);
            @LeftRight.started += instance.OnLeftRight;
            @LeftRight.performed += instance.OnLeftRight;
            @LeftRight.canceled += instance.OnLeftRight;
            @UpDown.started += instance.OnUpDown;
            @UpDown.performed += instance.OnUpDown;
            @UpDown.canceled += instance.OnUpDown;
            @Launch.started += instance.OnLaunch;
            @Launch.performed += instance.OnLaunch;
            @Launch.canceled += instance.OnLaunch;
        }

        private void UnregisterCallbacks(IPlayerPadActions instance)
        {
            @LeftRight.started -= instance.OnLeftRight;
            @LeftRight.performed -= instance.OnLeftRight;
            @LeftRight.canceled -= instance.OnLeftRight;
            @UpDown.started -= instance.OnUpDown;
            @UpDown.performed -= instance.OnUpDown;
            @UpDown.canceled -= instance.OnUpDown;
            @Launch.started -= instance.OnLaunch;
            @Launch.performed -= instance.OnLaunch;
            @Launch.canceled -= instance.OnLaunch;
        }

        public void RemoveCallbacks(IPlayerPadActions instance)
        {
            if (m_Wrapper.m_PlayerPadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerPadActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerPadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerPadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerPadActions @PlayerPad => new PlayerPadActions(this);

    // PlayerAbilities
    private readonly InputActionMap m_PlayerAbilities;
    private List<IPlayerAbilitiesActions> m_PlayerAbilitiesActionsCallbackInterfaces = new List<IPlayerAbilitiesActions>();
    private readonly InputAction m_PlayerAbilities_PointAbility1;
    private readonly InputAction m_PlayerAbilities_PointAbility2;
    public struct PlayerAbilitiesActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerAbilitiesActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointAbility1 => m_Wrapper.m_PlayerAbilities_PointAbility1;
        public InputAction @PointAbility2 => m_Wrapper.m_PlayerAbilities_PointAbility2;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAbilities; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAbilitiesActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerAbilitiesActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerAbilitiesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerAbilitiesActionsCallbackInterfaces.Add(instance);
            @PointAbility1.started += instance.OnPointAbility1;
            @PointAbility1.performed += instance.OnPointAbility1;
            @PointAbility1.canceled += instance.OnPointAbility1;
            @PointAbility2.started += instance.OnPointAbility2;
            @PointAbility2.performed += instance.OnPointAbility2;
            @PointAbility2.canceled += instance.OnPointAbility2;
        }

        private void UnregisterCallbacks(IPlayerAbilitiesActions instance)
        {
            @PointAbility1.started -= instance.OnPointAbility1;
            @PointAbility1.performed -= instance.OnPointAbility1;
            @PointAbility1.canceled -= instance.OnPointAbility1;
            @PointAbility2.started -= instance.OnPointAbility2;
            @PointAbility2.performed -= instance.OnPointAbility2;
            @PointAbility2.canceled -= instance.OnPointAbility2;
        }

        public void RemoveCallbacks(IPlayerAbilitiesActions instance)
        {
            if (m_Wrapper.m_PlayerAbilitiesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerAbilitiesActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerAbilitiesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerAbilitiesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerAbilitiesActions @PlayerAbilities => new PlayerAbilitiesActions(this);

    // PlayerInteractions
    private readonly InputActionMap m_PlayerInteractions;
    private List<IPlayerInteractionsActions> m_PlayerInteractionsActionsCallbackInterfaces = new List<IPlayerInteractionsActions>();
    private readonly InputAction m_PlayerInteractions_Escape;
    private readonly InputAction m_PlayerInteractions_LevelUp;
    private readonly InputAction m_PlayerInteractions_Nothing;
    public struct PlayerInteractionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerInteractionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_PlayerInteractions_Escape;
        public InputAction @LevelUp => m_Wrapper.m_PlayerInteractions_LevelUp;
        public InputAction @Nothing => m_Wrapper.m_PlayerInteractions_Nothing;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInteractions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInteractionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInteractionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @LevelUp.started += instance.OnLevelUp;
            @LevelUp.performed += instance.OnLevelUp;
            @LevelUp.canceled += instance.OnLevelUp;
            @Nothing.started += instance.OnNothing;
            @Nothing.performed += instance.OnNothing;
            @Nothing.canceled += instance.OnNothing;
        }

        private void UnregisterCallbacks(IPlayerInteractionsActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @LevelUp.started -= instance.OnLevelUp;
            @LevelUp.performed -= instance.OnLevelUp;
            @LevelUp.canceled -= instance.OnLevelUp;
            @Nothing.started -= instance.OnNothing;
            @Nothing.performed -= instance.OnNothing;
            @Nothing.canceled -= instance.OnNothing;
        }

        public void RemoveCallbacks(IPlayerInteractionsActions instance)
        {
            if (m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInteractionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInteractionsActions @PlayerInteractions => new PlayerInteractionsActions(this);
    public interface IPlayerPadActions
    {
        void OnLeftRight(InputAction.CallbackContext context);
        void OnUpDown(InputAction.CallbackContext context);
        void OnLaunch(InputAction.CallbackContext context);
    }
    public interface IPlayerAbilitiesActions
    {
        void OnPointAbility1(InputAction.CallbackContext context);
        void OnPointAbility2(InputAction.CallbackContext context);
    }
    public interface IPlayerInteractionsActions
    {
        void OnEscape(InputAction.CallbackContext context);
        void OnLevelUp(InputAction.CallbackContext context);
        void OnNothing(InputAction.CallbackContext context);
    }
}
